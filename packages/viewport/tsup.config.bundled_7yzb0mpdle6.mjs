// ../../build/tsup.base.config.ts
import { defineConfig } from "tsup";
var createBaseConfig = (options = {}) => {
  const isProduction = process.env.NODE_ENV === "production";
  return defineConfig({
    // Entry points
    entry: ["src/index.ts"],
    // Output formats
    format: ["cjs", "esm"],
    // TypeScript declarations
    dts: {
      resolve: true,
      compilerOptions: {
        composite: false,
        incremental: false
      }
    },
    // Source maps for debugging
    sourcemap: true,
    // Clean output directory before build
    clean: true,
    // Minification in production
    minify: isProduction,
    // Tree shaking for smaller bundles
    treeshake: isProduction ? {
      moduleSideEffects: false,
      propertyReadSideEffects: false,
      tryCatchDeoptimization: false
    } : false,
    // Code splitting
    splitting: false,
    // Skip node_modules bundling
    skipNodeModulesBundle: true,
    // External dependencies (to be resolved by consumer)
    external: [
      "react",
      "react-dom",
      "react/jsx-runtime"
    ],
    // Target environment
    target: "es2022",
    // Keep names for better debugging
    keepNames: true,
    // Shims
    shims: true,
    // Banner for license/metadata
    banner: {
      js: `/**
 * @brepflow
 * (c) ${(/* @__PURE__ */ new Date()).getFullYear()} BrepFlow - MIT License
 */`
    },
    // Merge with custom options
    ...options
  });
};
var createLibraryConfig = (options = {}) => {
  return createBaseConfig({
    dts: {
      resolve: true,
      entry: ["src/index.ts"]
    },
    external: [
      "react",
      "react-dom",
      "react/jsx-runtime",
      /^@brepflow\//
    ],
    ...options
  });
};

// tsup.config.ts
var tsup_config_default = createLibraryConfig({
  entry: ["src/index.ts"],
  external: [
    "react",
    "react-dom",
    "three",
    "@react-three/fiber",
    "@react-three/drei",
    /^@brepflow\//
  ]
});
export {
  tsup_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vYnVpbGQvdHN1cC5iYXNlLmNvbmZpZy50cyIsICJ0c3VwLmNvbmZpZy50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiY29uc3QgX19pbmplY3RlZF9maWxlbmFtZV9fID0gXCIvVXNlcnMvYWxkb3J1aXpsdW5hL2xhYnNwYWNlL2JyZXBmbG93L2J1aWxkL3RzdXAuYmFzZS5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiL1VzZXJzL2FsZG9ydWl6bHVuYS9sYWJzcGFjZS9icmVwZmxvdy9idWlsZFwiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vVXNlcnMvYWxkb3J1aXpsdW5hL2xhYnNwYWNlL2JyZXBmbG93L2J1aWxkL3RzdXAuYmFzZS5jb25maWcudHNcIjtpbXBvcnQgeyBkZWZpbmVDb25maWcsIE9wdGlvbnMgfSBmcm9tICd0c3VwJztcbmltcG9ydCB7IHJlc29sdmUgfSBmcm9tICdwYXRoJztcblxuLyoqXG4gKiBCYXNlIHRzdXAgY29uZmlndXJhdGlvbiBmb3IgYWxsIHBhY2thZ2VzXG4gKiBQcm92aWRlcyBjb25zaXN0ZW50IGJ1aWxkIHNldHRpbmdzIGFjcm9zcyB0aGUgbW9ub3JlcG9cbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUJhc2VDb25maWcgPSAob3B0aW9uczogUGFydGlhbDxPcHRpb25zPiA9IHt9KTogT3B0aW9ucyA9PiB7XG4gIGNvbnN0IGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5cbiAgcmV0dXJuIGRlZmluZUNvbmZpZyh7XG4gICAgLy8gRW50cnkgcG9pbnRzXG4gICAgZW50cnk6IFsnc3JjL2luZGV4LnRzJ10sXG5cbiAgICAvLyBPdXRwdXQgZm9ybWF0c1xuICAgIGZvcm1hdDogWydjanMnLCAnZXNtJ10sXG5cbiAgICAvLyBUeXBlU2NyaXB0IGRlY2xhcmF0aW9uc1xuICAgIGR0czoge1xuICAgICAgcmVzb2x2ZTogdHJ1ZSxcbiAgICAgIGNvbXBpbGVyT3B0aW9uczoge1xuICAgICAgICBjb21wb3NpdGU6IGZhbHNlLFxuICAgICAgICBpbmNyZW1lbnRhbDogZmFsc2UsXG4gICAgICB9LFxuICAgIH0sXG5cbiAgICAvLyBTb3VyY2UgbWFwcyBmb3IgZGVidWdnaW5nXG4gICAgc291cmNlbWFwOiB0cnVlLFxuXG4gICAgLy8gQ2xlYW4gb3V0cHV0IGRpcmVjdG9yeSBiZWZvcmUgYnVpbGRcbiAgICBjbGVhbjogdHJ1ZSxcblxuICAgIC8vIE1pbmlmaWNhdGlvbiBpbiBwcm9kdWN0aW9uXG4gICAgbWluaWZ5OiBpc1Byb2R1Y3Rpb24sXG5cbiAgICAvLyBUcmVlIHNoYWtpbmcgZm9yIHNtYWxsZXIgYnVuZGxlc1xuICAgIHRyZWVzaGFrZTogaXNQcm9kdWN0aW9uID8ge1xuICAgICAgbW9kdWxlU2lkZUVmZmVjdHM6IGZhbHNlLFxuICAgICAgcHJvcGVydHlSZWFkU2lkZUVmZmVjdHM6IGZhbHNlLFxuICAgICAgdHJ5Q2F0Y2hEZW9wdGltaXphdGlvbjogZmFsc2UsXG4gICAgfSA6IGZhbHNlLFxuXG4gICAgLy8gQ29kZSBzcGxpdHRpbmdcbiAgICBzcGxpdHRpbmc6IGZhbHNlLFxuXG4gICAgLy8gU2tpcCBub2RlX21vZHVsZXMgYnVuZGxpbmdcbiAgICBza2lwTm9kZU1vZHVsZXNCdW5kbGU6IHRydWUsXG5cbiAgICAvLyBFeHRlcm5hbCBkZXBlbmRlbmNpZXMgKHRvIGJlIHJlc29sdmVkIGJ5IGNvbnN1bWVyKVxuICAgIGV4dGVybmFsOiBbXG4gICAgICAncmVhY3QnLFxuICAgICAgJ3JlYWN0LWRvbScsXG4gICAgICAncmVhY3QvanN4LXJ1bnRpbWUnLFxuICAgIF0sXG5cbiAgICAvLyBUYXJnZXQgZW52aXJvbm1lbnRcbiAgICB0YXJnZXQ6ICdlczIwMjInLFxuXG4gICAgLy8gS2VlcCBuYW1lcyBmb3IgYmV0dGVyIGRlYnVnZ2luZ1xuICAgIGtlZXBOYW1lczogdHJ1ZSxcblxuICAgIC8vIFNoaW1zXG4gICAgc2hpbXM6IHRydWUsXG5cbiAgICAvLyBCYW5uZXIgZm9yIGxpY2Vuc2UvbWV0YWRhdGFcbiAgICBiYW5uZXI6IHtcbiAgICAgIGpzOiBgLyoqXG4gKiBAYnJlcGZsb3dcbiAqIChjKSAke25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX0gQnJlcEZsb3cgLSBNSVQgTGljZW5zZVxuICovYCxcbiAgICB9LFxuXG4gICAgLy8gTWVyZ2Ugd2l0aCBjdXN0b20gb3B0aW9uc1xuICAgIC4uLm9wdGlvbnMsXG4gIH0gYXMgT3B0aW9ucyk7XG59O1xuXG4vKipcbiAqIENyZWF0ZSBjb25maWd1cmF0aW9uIGZvciBsaWJyYXJ5IHBhY2thZ2VzXG4gKi9cbmV4cG9ydCBjb25zdCBjcmVhdGVMaWJyYXJ5Q29uZmlnID0gKG9wdGlvbnM6IFBhcnRpYWw8T3B0aW9ucz4gPSB7fSk6IE9wdGlvbnMgPT4ge1xuICByZXR1cm4gY3JlYXRlQmFzZUNvbmZpZyh7XG4gICAgZHRzOiB7XG4gICAgICByZXNvbHZlOiB0cnVlLFxuICAgICAgZW50cnk6IFsnc3JjL2luZGV4LnRzJ10sXG4gICAgfSxcbiAgICBleHRlcm5hbDogW1xuICAgICAgJ3JlYWN0JyxcbiAgICAgICdyZWFjdC1kb20nLFxuICAgICAgJ3JlYWN0L2pzeC1ydW50aW1lJyxcbiAgICAgIC9eQGJyZXBmbG93XFwvLyxcbiAgICBdLFxuICAgIC4uLm9wdGlvbnMsXG4gIH0pO1xufTtcblxuLyoqXG4gKiBDcmVhdGUgY29uZmlndXJhdGlvbiBmb3IgYXBwbGljYXRpb24gcGFja2FnZXNcbiAqL1xuZXhwb3J0IGNvbnN0IGNyZWF0ZUFwcENvbmZpZyA9IChvcHRpb25zOiBQYXJ0aWFsPE9wdGlvbnM+ID0ge30pOiBPcHRpb25zID0+IHtcbiAgcmV0dXJuIGNyZWF0ZUJhc2VDb25maWcoe1xuICAgIHNwbGl0dGluZzogdHJ1ZSxcbiAgICBtaW5pZnk6IHRydWUsXG4gICAgZXh0ZXJuYWw6IFtcbiAgICAgICdyZWFjdCcsXG4gICAgICAncmVhY3QtZG9tJyxcbiAgICAgICdyZWFjdC9qc3gtcnVudGltZScsXG4gICAgXSxcbiAgICAuLi5vcHRpb25zLFxuICB9KTtcbn07XG5cbi8qKlxuICogQ3JlYXRlIGNvbmZpZ3VyYXRpb24gZm9yIHdvcmtlciBwYWNrYWdlc1xuICovXG5leHBvcnQgY29uc3QgY3JlYXRlV29ya2VyQ29uZmlnID0gKG9wdGlvbnM6IFBhcnRpYWw8T3B0aW9ucz4gPSB7fSk6IE9wdGlvbnMgPT4ge1xuICByZXR1cm4gY3JlYXRlQmFzZUNvbmZpZyh7XG4gICAgZm9ybWF0OiBbJ2VzbSddLFxuICAgIHBsYXRmb3JtOiAnYnJvd3NlcicsXG4gICAgdGFyZ2V0OiAnZXMyMDIyJyxcbiAgICBleHRlcm5hbDogW10sXG4gICAgLi4ub3B0aW9ucyxcbiAgfSk7XG59OyIsICJjb25zdCBfX2luamVjdGVkX2ZpbGVuYW1lX18gPSBcIi9Vc2Vycy9hbGRvcnVpemx1bmEvbGFic3BhY2UvYnJlcGZsb3cvcGFja2FnZXMvdmlld3BvcnQvdHN1cC5jb25maWcudHNcIjtjb25zdCBfX2luamVjdGVkX2Rpcm5hbWVfXyA9IFwiL1VzZXJzL2FsZG9ydWl6bHVuYS9sYWJzcGFjZS9icmVwZmxvdy9wYWNrYWdlcy92aWV3cG9ydFwiO2NvbnN0IF9faW5qZWN0ZWRfaW1wb3J0X21ldGFfdXJsX18gPSBcImZpbGU6Ly8vVXNlcnMvYWxkb3J1aXpsdW5hL2xhYnNwYWNlL2JyZXBmbG93L3BhY2thZ2VzL3ZpZXdwb3J0L3RzdXAuY29uZmlnLnRzXCI7aW1wb3J0IHsgY3JlYXRlTGlicmFyeUNvbmZpZyB9IGZyb20gJy4uLy4uL2J1aWxkL3RzdXAuYmFzZS5jb25maWcnO1xuXG4vKipcbiAqIFZpZXdwb3J0IGJ1aWxkIGNvbmZpZ3VyYXRpb25cbiAqIFRocmVlLmpzLWJhc2VkIDNEIHJlbmRlcmluZyBhbmQgaW50ZXJhY3Rpb25cbiAqL1xuZXhwb3J0IGRlZmF1bHQgY3JlYXRlTGlicmFyeUNvbmZpZyh7XG4gIGVudHJ5OiBbJ3NyYy9pbmRleC50cyddLFxuICBleHRlcm5hbDogW1xuICAgICdyZWFjdCcsXG4gICAgJ3JlYWN0LWRvbScsXG4gICAgJ3RocmVlJyxcbiAgICAnQHJlYWN0LXRocmVlL2ZpYmVyJyxcbiAgICAnQHJlYWN0LXRocmVlL2RyZWknLFxuICAgIC9eQGJyZXBmbG93XFwvLyxcbiAgXSxcbn0pOyJdLAogICJtYXBwaW5ncyI6ICI7QUFBeVIsU0FBUyxvQkFBNkI7QUFPeFQsSUFBTSxtQkFBbUIsQ0FBQyxVQUE0QixDQUFDLE1BQWU7QUFDM0UsUUFBTSxlQUFlLFFBQVEsSUFBSSxhQUFhO0FBRTlDLFNBQU8sYUFBYTtBQUFBO0FBQUEsSUFFbEIsT0FBTyxDQUFDLGNBQWM7QUFBQTtBQUFBLElBR3RCLFFBQVEsQ0FBQyxPQUFPLEtBQUs7QUFBQTtBQUFBLElBR3JCLEtBQUs7QUFBQSxNQUNILFNBQVM7QUFBQSxNQUNULGlCQUFpQjtBQUFBLFFBQ2YsV0FBVztBQUFBLFFBQ1gsYUFBYTtBQUFBLE1BQ2Y7QUFBQSxJQUNGO0FBQUE7QUFBQSxJQUdBLFdBQVc7QUFBQTtBQUFBLElBR1gsT0FBTztBQUFBO0FBQUEsSUFHUCxRQUFRO0FBQUE7QUFBQSxJQUdSLFdBQVcsZUFBZTtBQUFBLE1BQ3hCLG1CQUFtQjtBQUFBLE1BQ25CLHlCQUF5QjtBQUFBLE1BQ3pCLHdCQUF3QjtBQUFBLElBQzFCLElBQUk7QUFBQTtBQUFBLElBR0osV0FBVztBQUFBO0FBQUEsSUFHWCx1QkFBdUI7QUFBQTtBQUFBLElBR3ZCLFVBQVU7QUFBQSxNQUNSO0FBQUEsTUFDQTtBQUFBLE1BQ0E7QUFBQSxJQUNGO0FBQUE7QUFBQSxJQUdBLFFBQVE7QUFBQTtBQUFBLElBR1IsV0FBVztBQUFBO0FBQUEsSUFHWCxPQUFPO0FBQUE7QUFBQSxJQUdQLFFBQVE7QUFBQSxNQUNOLElBQUk7QUFBQTtBQUFBLFVBRUQsb0JBQUksS0FBSyxHQUFFLFlBQVksQ0FBQztBQUFBO0FBQUEsSUFFN0I7QUFBQTtBQUFBLElBR0EsR0FBRztBQUFBLEVBQ0wsQ0FBWTtBQUNkO0FBS08sSUFBTSxzQkFBc0IsQ0FBQyxVQUE0QixDQUFDLE1BQWU7QUFDOUUsU0FBTyxpQkFBaUI7QUFBQSxJQUN0QixLQUFLO0FBQUEsTUFDSCxTQUFTO0FBQUEsTUFDVCxPQUFPLENBQUMsY0FBYztBQUFBLElBQ3hCO0FBQUEsSUFDQSxVQUFVO0FBQUEsTUFDUjtBQUFBLE1BQ0E7QUFBQSxNQUNBO0FBQUEsTUFDQTtBQUFBLElBQ0Y7QUFBQSxJQUNBLEdBQUc7QUFBQSxFQUNMLENBQUM7QUFDSDs7O0FDeEZBLElBQU8sc0JBQVEsb0JBQW9CO0FBQUEsRUFDakMsT0FBTyxDQUFDLGNBQWM7QUFBQSxFQUN0QixVQUFVO0FBQUEsSUFDUjtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsSUFDQTtBQUFBLElBQ0E7QUFBQSxJQUNBO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
